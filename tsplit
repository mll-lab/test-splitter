#!/usr/bin/env php
<?php

declare(strict_types=1);

use DaveLiddament\TestSplitter\CliArgumentParser;
use DaveLiddament\TestSplitter\InvalidArgumentsException;
use DaveLiddament\TestSplitter\TestClassSplitter;
use DaveLiddament\TestSplitter\TestNameExtractor;


function loadAutoloader(): void
{
    $autoloaderLocations = [
        __DIR__ . '/vendor/autoload.php',
        __DIR__ . '/../../autoload.php',
    ];

    foreach($autoloaderLocations as $autoloaderLocation) {
        if (file_exists($autoloaderLocation)) {
            require($autoloaderLocation);
            return;
        }
    }

    die("Can not find autoloader");
}

loadAutoloader();

try {
    $cliArgumentParser = new CliArgumentParser($argv);
} catch (InvalidArgumentsException $e) {
    printf("\n\nError: %s\n\n Usage: %s <set> <of>\n\n", $e->getMessage(), $argv[0]);
    exit(1);
}

$stdIn = stream_get_contents(STDIN);

$testNameExtractor = new TestNameExtractor();

// TODO add CLI option to choose between class names and function names
$testClassSplitter = new TestClassSplitter($testNameExtractor->getTestFunctionNames($stdIn));

$testCaseNames = $testClassSplitter->getTestCaseNames($cliArgumentParser->getNumerator(), $cliArgumentParser->getDenominator());
$escapedTestCaseNames = array_map(function (string $testCaseName): string {
    return str_replace('\\', '\\\\', $testCaseName);
}, $testCaseNames);

$output = join('|', $escapedTestCaseNames);

echo $output;
